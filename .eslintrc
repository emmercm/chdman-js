{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "airbnb-base",
    "airbnb-typescript/base",
    "plugin:jsdoc/recommended-typescript-error",
    "plugin:jest/recommended",
    "plugin:unicorn/recommended"
  ],
  "plugins": [
    "@typescript-eslint",
    "simple-import-sort",
    "jest",
    "unicorn"
  ],

  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "sourceType": "module"
  },
  "ignorePatterns": ["dist/**"],

  "env": {
    "jest/globals": true
  },

  "rules": {
    // ***** Files *****
    "unicorn/filename-case": ["error", {
      "case": "camelCase"
    }],

    // ***** Imports *****
    "@typescript-eslint/no-restricted-imports": ["error", {
      "paths": [{
        "name": "fs",
        "importNames": ["promises"],
        "message": "Use util.promisify(fs.*)() instead of fs.promises.*()."
      }]
    }],
    "no-restricted-exports": "off",

    // ***** JSDoc *****
    "jsdoc/require-jsdoc": ["error", {
      // Require on public parts of classes
      "checkConstructors": false,
      "contexts": [
        "ClassDeclaration",
        // TODO(cemmer): require private methods as well
        "MethodDefinition[accessibility!=private][key.name!=/^(get|set)[A-Z][a-zA-Z]+/]"
      ]
    }],
    "jsdoc/require-param": "off",
    "jsdoc/require-returns": "off",
    "jsdoc/no-blank-blocks": "error",

    // ***** Promises *****
    // Disallow awaiting a value that is not a Thenable.
    "@typescript-eslint/await-thenable": "error",
    // Disallow async functions which have no `await` expression.
    "@typescript-eslint/require-await": "error",
    // Enforce consistent returning of awaited values.
    "@typescript-eslint/return-await": "error",
    // Require any function or method that returns a Promise to be marked async.
    "@typescript-eslint/promise-function-async": ["error"],

    // ***** Classes *****
    "@typescript-eslint/prefer-readonly": "error",

    // ***** Functions *****
    // Require explicit return types on functions and class methods.
    "@typescript-eslint/explicit-function-return-type": "error",

    // ***** Operands *****
    "@typescript-eslint/prefer-nullish-coalescing": "error",

    // ***** Conditionals *****
    // Don't allow unnecessary conditional checks, such as when a value is always true, which can also help catch cases
    // such as accidentally checking `if([]){}` vs. `if([].length){}`
    "@typescript-eslint/strict-boolean-expressions": ["error", {
      "allowAny": true,
      "allowNullableBoolean": true,
      "allowNullableString": true
    }],

    // ***** Objects *****
    "@typescript-eslint/no-unused-vars": ["error", {
      // Allow the use of destructuring to remove keys from an object
      "ignoreRestSiblings": true
    }],

    // ***** Arrays *****
    "no-restricted-syntax": ["error", {
      "selector": "CallExpression[callee.property.name='push'] > SpreadElement",
      "message": "Array#push(...Array) can cause 'call stack size exceeded' runtime errors when pushing many values, prefer 'Array = [...Array, ...Array]'"
    }],

    // ***** Strings *****
    "unicorn/prefer-string-replace-all": ["off"]
  }
}
